import reflex as rx
from app.states.exploit_intelligence_state import ExploitIntelligenceState, ExploitProof
from typing import Literal


def status_badge(status: rx.Var[str]) -> rx.Component:
    return rx.el.span(
        status.capitalize(),
        class_name=rx.match(
            status,
            (
                "confirmed",
                "px-2 py-1 text-xs font-medium text-green-700 bg-green-100 rounded-full",
            ),
            (
                "pending",
                "px-2 py-1 text-xs font-medium text-yellow-700 bg-yellow-100 rounded-full",
            ),
            (
                "validating",
                "px-2 py-1 text-xs font-medium text-blue-700 bg-blue-100 rounded-full animate-pulse",
            ),
            (
                "failed",
                "px-2 py-1 text-xs font-medium text-red-700 bg-red-100 rounded-full",
            ),
            "px-2 py-1 text-xs font-medium text-gray-700 bg-gray-100 rounded-full",
        ),
    )


def maturity_badge(maturity: rx.Var[str]) -> rx.Component:
    return rx.el.span(
        maturity.capitalize(),
        class_name=rx.match(
            maturity,
            (
                "weaponized",
                "px-2 py-1 text-xs font-bold text-red-700 bg-red-100 rounded-full border border-red-200",
            ),
            (
                "functional",
                "px-2 py-1 text-xs font-semibold text-orange-700 bg-orange-100 rounded-full",
            ),
            (
                "poc",
                "px-2 py-1 text-xs font-medium text-blue-700 bg-blue-100 rounded-full",
            ),
            "px-2 py-1 text-xs font-medium text-gray-700 bg-gray-100 rounded-full",
        ),
    )


def filter_button_group(
    title: str, options: list[str], state_list_name: str
) -> rx.Component:
    return rx.el.div(
        rx.el.label(title, class_name="block text-sm font-medium text-gray-700 mb-2"),
        rx.el.div(
            rx.foreach(
                options,
                lambda option: rx.el.button(
                    option.capitalize(),
                    on_click=lambda: ExploitIntelligenceState.toggle_filter(
                        state_list_name, option
                    ),
                    class_name=rx.cond(
                        rx.Var.create(
                            getattr(ExploitIntelligenceState, state_list_name)
                        ).contains(option),
                        "px-3 py-1 text-sm rounded-full bg-teal-500 text-white font-semibold",
                        "px-3 py-1 text-sm rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300",
                    ),
                ),
            ),
            class_name="flex flex-wrap gap-2",
        ),
    )


def filter_sidebar() -> rx.Component:
    return rx.el.div(
        rx.el.h3("Filters", class_name="text-xl font-bold text-gray-800 mb-6"),
        rx.el.div(
            rx.el.label(
                "Search", class_name="block text-sm font-medium text-gray-700 mb-1"
            ),
            rx.el.input(
                placeholder="CVE ID, title...",
                on_change=ExploitIntelligenceState.set_search_query.debounce(300),
                default_value=ExploitIntelligenceState.search_query,
                class_name="w-full p-2 border rounded-md text-sm",
            ),
            class_name="mb-6",
        ),
        filter_button_group(
            "Validation Status",
            ["pending", "validating", "confirmed", "failed"],
            "validation_status_filter",
        ),
        rx.el.hr(class_name="my-6"),
        filter_button_group(
            "Maturity Level",
            ["poc", "functional", "weaponized"],
            "maturity_level_filter",
        ),
        rx.el.hr(class_name="my-6"),
        filter_button_group(
            "Source", ["otx", "vulncheck", "metasploit"], "source_filter"
        ),
        rx.el.div(
            rx.el.button(
                "Clear Filters",
                on_click=ExploitIntelligenceState.clear_filters,
                class_name="w-full text-center py-2 bg-gray-200 rounded-md hover:bg-gray-300 font-semibold mt-8 text-sm",
            ),
            class_name="mt-auto pt-6",
        ),
        class_name="w-72 p-6 bg-white border-r h-screen sticky top-0 flex flex-col",
    )


def exploit_table_row(proof: ExploitProof) -> rx.Component:
    return rx.el.tr(
        rx.el.td(proof["cve_id"], class_name="px-4 py-3 font-mono text-sm"),
        rx.el.td(proof["title"], class_name="px-4 py-3 text-sm truncate max-w-sm"),
        rx.el.td(proof["source"].capitalize(), class_name="px-4 py-3 text-sm"),
        rx.el.td(maturity_badge(proof["maturity_level"]), class_name="px-4 py-3"),
        rx.el.td(status_badge(proof["validation_status"]), class_name="px-4 py-3"),
        rx.el.td(
            f"{(proof['confidence_score'] * 100).to_string()}%",
            class_name="px-4 py-3 text-sm font-medium",
        ),
        rx.el.td(proof["created_at"].split("T")[0], class_name="px-4 py-3 text-sm"),
        rx.el.td(
            rx.el.button(
                "Details",
                on_click=lambda: ExploitIntelligenceState.open_proof_details(proof),
                class_name="text-teal-600 hover:underline font-semibold text-sm",
            )
        ),
        class_name="border-b hover:bg-gray-50",
    )


def timeline_event(
    icon: str, title: str, date: rx.Var[str], color: str, is_last: bool = False
) -> rx.Component:
    return rx.el.div(
        rx.el.div(
            rx.el.div(
                rx.icon(icon, class_name="h-5 w-5 text-white"),
                class_name=f"flex items-center justify-center h-10 w-10 rounded-full {color}",
            ),
            rx.cond(
                ~is_last,
                rx.el.div(
                    class_name=f"absolute left-5 top-10 h-full w-0.5 {color} opacity-50"
                ),
                None,
            ),
            class_name="relative",
        ),
        rx.el.div(
            rx.el.p(title, class_name="font-semibold text-sm"),
            rx.el.p(date.split("T")[0], class_name="text-xs text-gray-500"),
            class_name="ml-4",
        ),
        class_name="flex items-center",
    )


def exploit_detail_modal() -> rx.Component:
    proof = ExploitIntelligenceState.selected_proof
    return rx.radix.primitives.dialog.root(
        rx.radix.primitives.dialog.content(
            rx.cond(
                proof,
                rx.fragment(
                    rx.radix.primitives.dialog.title(
                        proof["title"], class_name="text-2xl font-bold text-gray-800"
                    ),
                    rx.el.p(
                        f"For {proof['cve_id']}",
                        class_name="font-mono text-sm text-gray-500 mb-4",
                    ),
                    rx.el.div(
                        timeline_event(
                            "file-text",
                            "CVE Published",
                            "2024-01-01T00:00:00Z",
                            "bg-gray-400",
                        ),
                        timeline_event(
                            "search",
                            "PoC Discovered",
                            proof["created_at"],
                            "bg-blue-500",
                        ),
                        timeline_event(
                            "flask-conical",
                            "Validation Confirmed",
                            proof["validated_at"],
                            "bg-green-500",
                        ),
                        timeline_event(
                            "swords",
                            "Exploit Weaponized",
                            "2024-03-01T00:00:00Z",
                            "bg-red-500",
                            is_last=True,
                        ),
                        class_name="my-6",
                    ),
                    rx.el.div(
                        rx.el.h4("Validation Evidence", class_name="font-bold mb-2"),
                        rx.cond(
                            proof["validation_evidence"],
                            rx.el.pre(
                                rx.el.code(proof["validation_evidence"].to_string()),
                                class_name="bg-gray-900 text-white p-4 rounded-md text-xs overflow-x-auto",
                            ),
                            rx.el.p(
                                "No validation evidence available.",
                                class_name="text-sm text-gray-500",
                            ),
                        ),
                        class_name="p-4 bg-gray-50 rounded-lg border",
                    ),
                    rx.el.div(
                        rx.radix.primitives.dialog.close(
                            rx.el.button(
                                "Close",
                                class_name="mt-6 w-full bg-gray-200 text-gray-800 py-2 rounded-md font-semibold hover:bg-gray-300",
                            )
                        )
                    ),
                ),
                rx.el.p("Loading proof details..."),
            )
        ),
        open=ExploitIntelligenceState.show_detail_modal,
        on_open_change=ExploitIntelligenceState.close_proof_details,
    )


def exploit_intelligence_page() -> rx.Component:
    """The main page for the Exploit Intelligence repository."""
    return rx.el.div(
        filter_sidebar(),
        rx.el.main(
            rx.el.h1(
                "Exploit Intelligence Repository",
                class_name="text-3xl font-bold text-gray-800 mb-6",
            ),
            rx.el.div(
                rx.el.table(
                    rx.el.thead(
                        rx.el.tr(
                            rx.el.th(
                                "CVE ID", class_name="px-4 py-3 text-left font-semibold"
                            ),
                            rx.el.th(
                                "Title", class_name="px-4 py-3 text-left font-semibold"
                            ),
                            rx.el.th(
                                "Source", class_name="px-4 py-3 text-left font-semibold"
                            ),
                            rx.el.th(
                                "Maturity",
                                class_name="px-4 py-3 text-left font-semibold",
                            ),
                            rx.el.th(
                                "Status", class_name="px-4 py-3 text-left font-semibold"
                            ),
                            rx.el.th(
                                "Confidence",
                                class_name="px-4 py-3 text-left font-semibold",
                            ),
                            rx.el.th(
                                "Discovered",
                                class_name="px-4 py-3 text-left font-semibold",
                            ),
                            rx.el.th("", class_name="px-4 py-3"),
                        )
                    ),
                    rx.el.tbody(
                        rx.foreach(
                            ExploitIntelligenceState.filtered_proofs, exploit_table_row
                        )
                    ),
                ),
                class_name="bg-white rounded-lg shadow-sm border overflow-hidden",
            ),
            exploit_detail_modal(),
            class_name="flex-1 p-8",
        ),
        class_name="flex bg-gray-50 font-['Montserrat']",
        on_mount=ExploitIntelligenceState.load_exploit_proofs,
    )