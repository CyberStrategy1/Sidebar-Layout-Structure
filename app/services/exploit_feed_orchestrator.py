import logging
import asyncio
from app.integrations.exploit_feeds.otx import OTXFeedConnector
from app.integrations.exploit_feeds.vulncheck import VulnCheckConnector
from app.utils import supabase_client

logger = logging.getLogger(__name__)


class ExploitFeedOrchestrator:
    """Aggregates and normalizes data from various exploit intelligence feeds."""

    def __init__(self):
        self.otx = OTXFeedConnector()
        self.vulncheck = VulnCheckConnector()

    async def ingest_all_feeds(self, cve_id: str):
        """Fetches data from all configured feeds for a given CVE ID."""
        tasks = {
            "otx": self.otx.fetch_pulse_indicators(cve_id),
            "vulncheck": self.vulncheck.fetch_exploit_by_cve(cve_id),
        }
        results = await asyncio.gather(*tasks.values(), return_exceptions=True)
        raw_feed_data = dict(zip(tasks.keys(), results))
        for source, data in raw_feed_data.items():
            if isinstance(data, Exception):
                logger.error(f"Failed to fetch from {source} for {cve_id}: {data}")
                continue
            if not data:
                continue
            if source == "otx":
                normalized = self.otx.normalize_otx_data(data, cve_id)
            elif source == "vulncheck":
                normalized = self.vulncheck.normalize_vulncheck_data(data, cve_id)
            else:
                continue
            if normalized:
                feed_id = await supabase_client.store_exploit_feed_data(normalized)
                if feed_id:
                    await self.normalize_to_exploit_proof(normalized, feed_id)

    async def normalize_to_exploit_proof(self, feed_data: dict, feed_id: int):
        """Creates a standardized exploit_proofs record from normalized feed data."""
        raw = feed_data.get("raw_data", {})
        maturity = "poc"
        if "weaponized" in feed_data.get("title", "").lower():
            maturity = "weaponized"
        proof_data = {
            "cve_id": feed_data["cve_id"],
            "title": feed_data["title"],
            "description": feed_data["description"],
            "source_feed_id": feed_id,
            "maturity_level": maturity,
            "confidence_score": self.calculate_exploit_confidence(feed_data),
            "mitre_ttps": self.map_to_mitre_attack(feed_data),
            "affected_products": [
                p.get("product") for p in raw.get("affected_products", [])
            ],
        }
        await supabase_client.upsert_exploit_proof(proof_data)

    def calculate_exploit_confidence(self, feed_data: dict) -> float:
        source_reliability = {"otx": 0.7, "vulncheck": 0.9}.get(
            feed_data["source"], 0.5
        )
        return source_reliability

    def map_to_mitre_attack(self, feed_data: dict) -> list[str]:
        if "rce" in feed_data.get("description", "").lower():
            return ["T1210"]
        return []