import reflex as rx
from typing import Optional
import logging
from app.utils import supabase_client


class ExploitFeedState(rx.State):
    """Manages state for exploit intelligence feed data."""

    is_syncing: bool = False
    last_sync_time: Optional[str] = None
    sync_errors: list[str] = []
    exploit_proofs: list[dict] = []

    @rx.event(background=True)
    async def trigger_manual_sync(self):
        """Manually trigger a sync of exploit feeds."""
        from app.services.exploit_feed_scheduler import scheduled_exploit_feed_sync

        async with self:
            self.is_syncing = True
        try:
            await scheduled_exploit_feed_sync()
            async with self:
                from datetime import datetime, timezone

                self.last_sync_time = datetime.now(timezone.utc).isoformat()
            yield rx.toast.success("Exploit feeds sync completed!")
        except Exception as e:
            logging.exception(f"Manual feed sync failed: {e}")
            async with self:
                self.sync_errors.append(e)
            yield rx.toast.error("Feed sync failed.")
        finally:
            async with self:
                self.is_syncing = False

    @rx.event(background=True)
    async def load_feeds_for_cve(self, cve_id: str):
        """Load all exploit proofs related to a specific CVE."""
        from app.state import AppState

        async with self:
            self.is_syncing = True
            app_state = await self.get_state(AppState)
            org_id = app_state.active_organization_id
        try:
            proofs = await supabase_client.get_exploit_proofs_for_cve(cve_id, org_id)
            async with self:
                self.exploit_proofs = proofs
        except Exception as e:
            logging.exception(f"Failed to load proofs for {cve_id}: {e}")
        finally:
            async with self:
                self.is_syncing = False