import reflex as rx

EXPLOIT_INTEL_MIGRATION_SCRIPT = """
-- === Phase 4A: Exploit Intelligence Tables ===

-- Create 'exploit_feeds' to store raw data from various intelligence sources
CREATE TABLE IF NOT EXISTS public.exploit_feeds (
    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    source TEXT NOT NULL CHECK (source IN ('otx', 'vulncheck', 'exploitdb', 'metasploit')),
    cve_id TEXT,
    title TEXT,
    description TEXT,
    raw_data JSONB NOT NULL,
    fetched_at TIMESTAMPTZ DEFAULT NOW(),
    published_at TIMESTAMPTZ,
    tags TEXT[],
    references TEXT[],
    UNIQUE(source, cve_id, title)
);
COMMENT ON TABLE public.exploit_feeds IS 'Stores raw exploit intelligence data from various feeds.';

-- Create 'exploit_proofs' for normalized and validated PoCs
CREATE TABLE IF NOT EXISTS public.exploit_proofs (
    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    cve_id TEXT NOT NULL,
    organization_id UUID REFERENCES public.organizations(id) ON DELETE CASCADE,
    proof_type TEXT CHECK (proof_type IN ('metasploit', 'burp', 'manual', 'script')),
    title TEXT NOT NULL,
    description TEXT,
    source_feed_id BIGINT REFERENCES public.exploit_feeds(id) ON DELETE SET NULL,
    exploit_code TEXT,
    attack_vectors JSONB,
    mitre_ttps TEXT[],
    maturity_level TEXT CHECK (maturity_level IN ('poc', 'functional', 'weaponized')),
    validation_status TEXT DEFAULT 'pending' CHECK (validation_status IN ('pending', 'validating', 'confirmed', 'failed')),
    validation_evidence JSONB,
    validation_timestamp TIMESTAMPTZ,
    confidence_score NUMERIC(3,2),
    affected_products TEXT[],
    requires_conditions JSONB,
    severity_amplifier NUMERIC(3,1) DEFAULT 1.0,
    UNIQUE(cve_id, title)
);
COMMENT ON TABLE public.exploit_proofs IS 'Stores normalized and validated exploit proofs of concept.';

-- Create 'exploit_validations' to track validation attempts
CREATE TABLE IF NOT EXISTS public.exploit_validations (
    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    exploit_proof_id BIGINT NOT NULL REFERENCES public.exploit_proofs(id) ON DELETE CASCADE,
    validation_method TEXT NOT NULL,
    status TEXT NOT NULL CHECK (status IN ('started', 'success', 'failure')),
    started_at TIMESTAMPTZ DEFAULT NOW(),
    completed_at TIMESTAMPTZ,
    evidence_artifacts JSONB, -- e.g., {'pcap_url': '...', 'logs': '...'}
    validation_logs TEXT
);
COMMENT ON TABLE public.exploit_validations IS 'Logs all attempts to validate an exploit proof.';

-- === Phase 4A: RLS Policies ===

ALTER TABLE public.exploit_feeds ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.exploit_proofs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.exploit_validations ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view all public exploit feed data" ON public.exploit_feeds FOR SELECT
    USING (true);

CREATE POLICY "Users can manage exploit proofs in their org" ON public.exploit_proofs FOR ALL
    USING ( organization_id = (SELECT organization_id FROM public.users WHERE id = auth.uid()) OR organization_id IS NULL );

CREATE POLICY "Users can manage exploit validations in their org" ON public.exploit_validations FOR ALL
    USING ( exploit_proof_id IN (SELECT id FROM public.exploit_proofs WHERE organization_id = (SELECT organization_id FROM public.users WHERE id = auth.uid())) );

CREATE POLICY "Admins can manage all exploit proofs and validations" ON public.exploit_proofs FOR ALL
    USING ( (SELECT role FROM public.users WHERE id = auth.uid()) = 'admin' );

CREATE POLICY "Admins can manage all exploit validations" ON public.exploit_validations FOR ALL
    USING ( (SELECT role FROM public.users WHERE id = auth.uid()) = 'admin' );


-- === Phase 4A: Indexes ===

CREATE INDEX IF NOT EXISTS idx_exploit_feeds_cve_id ON public.exploit_feeds(cve_id);
CREATE INDEX IF NOT EXISTS idx_exploit_proofs_cve_id ON public.exploit_proofs(cve_id);
CREATE INDEX IF NOT EXISTS idx_exploit_proofs_org_id_status ON public.exploit_proofs(organization_id, validation_status);
CREATE INDEX IF NOT EXISTS idx_exploit_validations_proof_id ON public.exploit_validations(exploit_proof_id);

-- === Final Grant Statements ===

GRANT ALL ON public.exploit_feeds TO authenticated;
GRANT ALL ON SEQUENCE exploit_feeds_id_seq TO authenticated;
GRANT ALL ON public.exploit_proofs TO authenticated;
GRANT ALL ON SEQUENCE exploit_proofs_id_seq TO authenticated;
GRANT ALL ON public.exploit_validations TO authenticated;
GRANT ALL ON SEQUENCE exploit_validations_id_seq TO authenticated;

SELECT 'SUCCESS: Phase 4A Exploit Intelligence schema has been applied.';
"""


def get_exploit_intelligence_migration_script() -> str:
    return EXPLOIT_INTEL_MIGRATION_SCRIPT