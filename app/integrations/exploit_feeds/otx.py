import httpx
import logging
import os
from typing import Optional, Any


class OTXFeedConnector:
    """Connector for AlienVault OTX exploit intelligence."""

    def __init__(self):
        self.api_key = os.getenv("OTX_API_KEY")
        self.base_url = "https://otx.alienvault.com/api/v1"

    async def fetch_pulse_indicators(self, cve_id: str) -> Optional[dict]:
        if not self.api_key:
            logging.warning("OTX_API_KEY not set. Skipping OTX fetch.")
            return None
        try:
            headers = {"X-OTX-API-KEY": self.api_key}
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"{self.base_url}/indicators/cve/{cve_id}", headers=headers
                )
                response.raise_for_status()
                return response.json()
        except httpx.HTTPStatusError as e:
            if e.response.status_code == 404:
                logging.info(f"No OTX indicators found for {cve_id}")
            else:
                logging.exception(f"Error fetching OTX data for {cve_id}: {e}")
        return None

    async def fetch_recent_exploits(self, days: int = 7) -> list:
        logging.info(
            f"Simulating fetch of recent OTX exploits for the last {days} days."
        )
        return []

    def normalize_otx_data(self, raw_data: dict, cve_id: str) -> dict:
        pulses = raw_data.get("pulse_info", {}).get("pulses", [])
        if not pulses:
            return {}

        def get_modified_date(p):
            return p.get("modified", "")

        latest_pulse = sorted(pulses, key=get_modified_date, reverse=True)[0]
        return {
            "source": "otx",
            "cve_id": cve_id,
            "title": latest_pulse.get("name", f"OTX Pulse for {cve_id}"),
            "description": latest_pulse.get("description", ""),
            "raw_data": raw_data,
            "published_at": latest_pulse.get("created"),
            "tags": latest_pulse.get("tags", []),
            "references": [
                p.get("reference") for p in latest_pulse.get("references", [])
            ],
        }