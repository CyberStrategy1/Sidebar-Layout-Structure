import httpx
import logging
import os
from typing import Optional


class VulnCheckConnector:
    """Connector for VulnCheck exploit intelligence."""

    def __init__(self):
        self.api_key = os.getenv("VULNCHECK_API_KEY")
        self.base_url = "https://api.vulncheck.com/v3"

    async def fetch_exploit_by_cve(self, cve_id: str) -> Optional[dict]:
        if not self.api_key:
            logging.warning("VULNCHECK_API_KEY not set. Skipping VulnCheck fetch.")
            return None
        try:
            headers = {"Authorization": f"Bearer {self.api_key}"}
            params = {"cve": cve_id}
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"{self.base_url}/exploit/references",
                    headers=headers,
                    params=params,
                )
                response.raise_for_status()
                data = response.json()
                return data if data.get("data") else None
        except httpx.HTTPStatusError as e:
            logging.exception(f"Error fetching VulnCheck data for {cve_id}: {e}")
        return None

    def normalize_vulncheck_data(self, raw_data: dict, cve_id: str) -> dict:
        if not raw_data or not raw_data.get("data"):
            return {}
        exploit_ref = raw_data["data"][0]
        return {
            "source": "vulncheck",
            "cve_id": cve_id,
            "title": exploit_ref.get("title", f"VulnCheck Exploit for {cve_id}"),
            "description": exploit_ref.get("description", ""),
            "raw_data": raw_data,
            "published_at": exploit_ref.get("published_timestamp"),
            "tags": [exploit_ref.get("exploit_type")]
            if exploit_ref.get("exploit_type")
            else [],
            "references": [exploit_ref.get("url")] if exploit_ref.get("url") else [],
        }